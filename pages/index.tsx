import Head from 'next/head'
import { Inter } from 'next/font/google'
import { useEffect, useRef, useState } from 'react';
import Image from 'next/image';
import { Box, Button, Flex, Input, InputGroup, InputLeftElement, Link, Spacer, Text, VStack } from '@chakra-ui/react'
import { SearchIcon } from '@chakra-ui/icons';
import Select from 'react-select'
import Hero from '@/components/hero';
import { useConstituency, useCounty, useResults, useWard } from '@/lib/hooks';
import { filterStyles } from '@/components/filterStyles';

const inter = Inter({ subsets: ['latin'] })

const defaultFilters = {
  county_name: null,
  constituency_name: null,
  ward_name: null
};


export default function Home() {
  const ref = useRef<null | HTMLDivElement>(null);
  const [queryParams, setQueryParams] = useState('')
  const { data } = useResults(queryParams)
  const [filters, setFilters] = useState(defaultFilters);
  const { county, countyLoading } = useCounty()
  const { constituency, constituencyLoading } = useConstituency(filters.county_name && `?county_name=${filters.county_name.value}`)
  const { ward, wardLoading } = useWard(filters.constituency_name && `?constituency_name=${filters.constituency_name.value}`)


  const countyOptions = county?.map(
    ({ county_name }) => ({
      value: county_name,
      label: county_name
    })
  );

  const constituencyOptions = constituency?.map(
    ({ constituency_name }) => ({
      value: constituency_name,
      label: constituency_name
    })
  );
  const wardOptions = ward?.map(
    ({ ward_name }) => ({
      value: ward_name,
      label: ward_name
    })
  );



  const handleClick = () => {
    ref.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {

  })

  const onChange = ({ key, value }) => {
    if (queryParams) {
      setQueryParams(`${queryParams}&${key}=${value?.value}`)
    } else {
      setQueryParams(`?${key}=${value?.value}`)
    }

    setFilters({ ...filters, [key]: value });
  };

  const onSearch = (e: any) => {
    setQueryParams(`?search=${e}`)


    if (queryParams) {
      setQueryParams(`${queryParams}&search=${e}`)
    } else {
      setQueryParams(`?search=${e}`)
    }
  };

  const clearFilters = () => {
    setFilters(defaultFilters);
    setQueryParams('')
  }

  return (
    <>
      <Head>
        <title>Grassroots Elections</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Hero handleClick={handleClick} />

        <Box
          height="100vh"
          ref={ref}
          p={{ base: '40px 5px 0px 5px', lg: '40px 140px 0px 140px' }}
        >
          <Flex gap={2} direction={{base: 'column', md: 'row' }}>
            <InputGroup >
              <InputLeftElement pointerEvents='none'>
                <SearchIcon color='gray.300' />
              </InputLeftElement>
              <Input
                borderRadius='12px'
                h='35px'
                bgColor='#F5F7F8'
                placeholder='Search by Polling Center'
                onChange={(e) => onSearch(e.target.value)}
              />
            </InputGroup>
              <Select
                options={countyOptions}
                styles={filterStyles}
                isLoading={countyLoading}
                instanceId="long-value-select"
                value={filters.county_name}
                placeholder="County"
                onChange={(filter) => {
                  onChange({ key: "county_name", value: filter });
                }}
              />
            <Select
              options={constituencyOptions}
              styles={filterStyles}
              isLoading={constituencyLoading}
              instanceId="long-value-select"
              value={filters.constituency_name}
              placeholder="Constituency"
              isDisabled={!filters.county_name}
              onChange={(filter) => {
                onChange({ key: "constituency_name", value: filter });
              }}
            />

            <Select
              options={wardOptions}
              styles={filterStyles}
              isLoading={wardLoading}
              instanceId="long-value-select"
              value={filters.ward_name}
              placeholder="Ward"
              isDisabled={!filters.constituency_name}
              onChange={(filter) => {
                onChange({ key: "ward_name", value: filter });
              }}
            />
            <Button onClick={clearFilters} variant='ghost' color='#1A932E'>Reset</Button>

          </Flex>
          <Box>

            {data?.map((result: any, index) => (
              <Flex
                alignItems='center'
                my={4}
                borderTop='1px solid #EDEDED'
                borderBottom='1px solid #EDEDED'
                py={19}
                key={index}
              >
                <Flex >
                  <Image src="/pdf-icon.svg" alt="Vercel Logo" width={57} height={16} />
                  <VStack alignItems='left' ml={2}>
                    <Text fontWeight={700} fontSize={24}>{result.polling_center_name}</Text>
                    <Text color='#B4B4B4' fontSize={16}>{result.polling_center_code}</Text>
                  </VStack>


                </Flex>
                <Spacer />
                <Link
                  border='1px solid #1A932E'
                  borderRadius={100}
                  color='#1A932E'
                  fontSize={20}
                  fontWeight={700}
                  bgColor='white'
                  p='11px 21px'
                  href={result.report_page_link}
                  isExternal
                >
                  View Results
                </Link>
              </Flex>
            ))}



          </Box>

        </Box>

      </main>
    </>
  )
}
